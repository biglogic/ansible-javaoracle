---
    - hosts: localhost
      connection: local
      become: yes
      become_user: ec2-user
      vars:
        ansible_python_interpreter: /usr/bin/python2   
      vars_files:
        - ../groupvars/var.yml
      
      task:
        # - name: add proxy to ec2-user
        #   lineinfile:
        #     dest: /home/ec2-user/.bashrc
        #     line: '{{ item }}'
        #   with_items:
        #     - 'export http_proxy="http://172.18.10.246:80"'
        #     - 'export https_proxy="http://172.18.10.246:80"'
        #     - 'export no_proxy="localhost, .cat.com, 169.254.169.254"'
        #   tags: default

        # - name: add proxy to system environment file
        #   lineinfile:
        #     dest: /etc/environment
        #     line: '{{ item }}'
        #   with_items:
        #     - 'export http_proxy="http://172.18.10.246:80"'
        #     - 'export https_proxy="http://172.18.10.246:80"'
        #     - 'export no_proxy="localhost, .cat.com, 169.254.169.254"'
        #   tags: default

        - name: checking vsts exits or not
          stat:      
            path: /home/ec2-user/vsts-agent-linux-x64-2.173.0
          register: vsts_dir
          tags: default

        - name:  download the vsts agent
          get_url:
            url:  https://vstsagentpackage.azureedge.net/agent/2.173.0/vsts-agent-linux-x64-2.173.0.tar.gz
            dest: /tmp/vsts-agent-linux-x64-2.173.0.tar.gz
            force: yes
          when: vsts_dir is failed
          tags: default 
        
        - name: create directory vsts agent
          file:
            path: /home/ec2-user/vsts-agent-linux-x64-2.173.0 
            state: directory
          when: vsts_dir is failed
          tags: default      
        
        - name :  Unpack the downloaded vsts agent
          unarchive:
            src: /tmp/vsts-agent-linux-x64-2.173.0.tar.gz
            dest: /home/ec2-user/vsts-agent-linux-x64-2.173.0 
          when: vsts_dir is failed
          tags: default
           
        - name: Check if java is installed
          shell: |
            source ~/.bashrc
            java -version
          register: java_result
          ignore_errors: True
          tags: default

        - debug:
            msg: "Failed - Java is not installed"
          when: java_result is failed
          tags: default 

        - debug:
            msg: "Success - Java is installed"
          when:  java_result is success
          tags: default
                 
        - name: download java8 rpm
          get_url:
             url: "{{ item.value.url }}"
             headers: "{{ item.value.args }}"
             force: yes
             dest: /tmp
          with_dict: "{{ java }}"
          when: java_result is failed
          tags: java8  
      
        - name: Install package java8
          command: rpm -i /tmp/jdk-8u141-linux-x64.rpm
          args:
            warn: no
          when: java_result is failed
          become_user: root
          tags: java8 

        - name: Check if maven is installed
          shell: |
            source ~/.bashrc
            mvn --version
          register: maven_result
          ignore_errors: True
          tags: default

        - debug:
             msg: "Failed - maven is not installed"
          when: maven_result is failed
          tags: default

        - debug:
             msg: "Success - Java is installed"
          when:  maven_result is success
          tags: default

        - name: Download Maven
          get_url:
             url: "{{ item.value.url }}"
             force: yes
             dest: /tmp
          with_dict: "{{ maven }}" 
          when: maven_result is failed
          tags: default

        - name: Unarchive Maven
          unarchive:
             src: /tmp/apache-maven-3.6.3-bin.tar.gz
             dest: /usr/local/
             mode: 0755
             owner: root
             group: root  
          when: maven_result is failed
          become_user: root
          tags: default
     
        # - name: System-wide environment variables.
        #   lineinfile:
        #     dest: /etc/environment
        #     line: '{{ item }}'
        #   with_items:
        #     - 'export http_proxy="http://172.18.10.246:80"'
        #     - 'export https_proxy="http://172.18.10.246:80"'
        #     - 'export no_proxy="localhost, .cat.com, 169.254.169.254"'
          
        - name: move maven bin to /usr/local
          command: mv /usr/local/apache-maven-3.6.3 /usr/local/apache-maven
          when: maven_result is failed
          become_user: root                  
          tags: default

        - name: create maven environment
          lineinfile:
            dest: /home/ec2-user/.bashrc
            line: '{{ item }}'
          with_items:
            - 'export M2_HOME=/usr/local/apache-maven'
            - 'export M2=$M2_HOME/bin'
            - 'export PATH=$M2:$PATH'
          tags: default
        
        - name: create m2 directory
          file: 
            path: /home/ec2-user/.m2
            state: directory

        - name: create mvn settings file
          file: 
            path: /home/ec2-user/settings.xml
            state: file

        - name: sbt Installation
          shell: curl https://bintray.com/sbt/rpm/rpm | sudo tee /etc/yum.repos.d/bintray-sbt-rpm.repo
          args:
            warn: no 
            executable: /bin/bash
          become_user: root
          tags: default

        - name: Install yum package
          yum:
           name:
             - curl-devel
             - expat-devel
             - gettext-devel
             - openssl-devel
             - zlib-devel
             - wget
             - gcc
             - cpan
             - unzip
             - zip
             - docker
             - python3
             - postgresql-server
             - sbt
          become_user: root
          tags: default
        
        # - name: Add proxy to docker
        #   lineinfile:
        #     dest: /etc/sysconfig/docker
        #     line: '{{ item }}'
        #   with_items:
        #     - 'HTTP_PROXY=http://172.18.10.246:80'
        #     - 'HTTPS_PROXY=http://proxy.cat.com:80/'
        #     - 'NO_PROXY="localhost, .cat.com, 169.254.169.254"'
        #   become_user: root
        #   tags: default
    
        - name: Start Docker service
          service:
              name: docker
              state: started
              enabled: yes 
          become_user: root   
          tags: default

        - name: Add user ec2-user to docker group
          user:
            name: ec2-user
            groups: docker
            append: yes
          become_user: root
          tags: default

        - name: Install Docker Compose
          get_url:
             url:  "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64"
             dest: /usr/local/bin/docker-compose
             owner: root
             mode: 0755  
          become_user: root
          tags: default

        - name: check python version 
          command: python3 --version         
          register: python_result
          tags: default

        - name: create python virtual env directory 
          file:
            path: /home/ec2-user/python3
            state: directory  
          tags: default

        - name: install python virtual env
          shell: python3 -m pip install --user virtualenv
          args:
             executable: /bin/bash 
          tags: default         
  
        - name: install python virtual environment
          command:
            cmd: python3 -m venv /home/ec2-user/python3
          tags: default

        - name: nodejs and npm installation
          get_url:
               url: https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh
               dest: /home/ec2-user/install.sh
               mode: 0755   
          tags: default

        - name: run shell script
          shell: bash /home/ec2-user/install.sh
          args:
            executable: /bin/bash
          tags: default
       
        - name: nvm install 12.7.0
          shell: source /home/ec2-user/.bashrc; nvm install 12.7.0 
          args:
            executable: /bin/bash
          tags: default

        - name: check version
          command: "source /home/ec2-user/.bashrc; npm -v && node -v" 
          register: version_message
          ignore_errors: yes
          tags: default

        - debug:
            msg: "{{version_message}}"  
          tags: default

        - name: sdkman installation script download
          get_url: 
            url: https://get.sdkman.io 
            dest: /home/ec2-user/run.sh
            mode: 0755
          when: java_result is failed
          tags: java11

        - name : run sdkman installation script
          command:
            cmd: "bash /home/ec2-user/run.sh"  
          when: java_result is failed
          tags: java11

        - name: source sdk and Install the java 11.0.2-open
          shell: source /home/ec2-user/.bashrc; sdk install java 11.0.2-open; sdk use java 11.0.2-open
          args:
            executable: /bin/bash
          when: java_result is failed
          tags: java11 

        # - name: add  sbt environtment 
        #   lineinfile:
        #     dest:  /etc/environment
        #     line: '{{item}}'
        #   with_items:
        #     -  'export SBT_OPTS="-Dhttp.proxyHost=172.18.10.246 -Dhttp.proxyPort=80 -Dhttps.proxyHost=172.18.10.246 -Dhttps.proxyPort=80"'       
        #   tags: default     
  